// <auto-generated />
using System;
using ClinicSystem.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicSystem.API.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20250817221550_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicSystem.API.Models.AntenatalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodPresure")
                        .HasColumnType("text")
                        .HasColumnName("blood_presure");

                    b.Property<string>("DoctorNotes")
                        .HasColumnType("text")
                        .HasColumnName("doctor_notes");

                    b.Property<int?>("FetalHeartRate")
                        .HasColumnType("integer")
                        .HasColumnName("fetal_heart_rate");

                    b.Property<int>("PregnancyId")
                        .HasColumnType("integer")
                        .HasColumnName("pregnancy_id");

                    b.Property<string>("UrineTestResult")
                        .HasColumnType("text")
                        .HasColumnName("urine_test_result");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("visit_date");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("antenatal_visit", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_date_time");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_number");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text")
                        .HasColumnName("marital_status");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Specialty")
                        .HasColumnType("text")
                        .HasColumnName("specialty");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_type");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("upload_date");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("file_upload", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.GynecologicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContraceptiveUse")
                        .HasColumnType("text")
                        .HasColumnName("contraceptive_use");

                    b.Property<int?>("CycleLength")
                        .HasColumnType("integer")
                        .HasColumnName("cycle_length");

                    b.Property<bool?>("CycleRegular")
                        .HasColumnType("boolean")
                        .HasColumnName("cycle_regular");

                    b.Property<string>("HpvStatus")
                        .HasColumnType("text")
                        .HasColumnName("hpv_status");

                    b.Property<DateTime?>("LastMenstralPeriod")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_menstral_period");

                    b.Property<int?>("ManarcheAge")
                        .HasColumnType("integer")
                        .HasColumnName("manarche_age");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PapSmearDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pap_smear_date");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<bool?>("SexuallyActive")
                        .HasColumnType("boolean")
                        .HasColumnName("sexually_active");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("gynocological_history", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issue_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("paid_amount");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int?>("RequestedByDoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("requested_by_doctor_id");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("result_date");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("test_name");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestedByDoctorId");

                    b.ToTable("lab_test", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("text")
                        .HasColumnName("allergies");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text")
                        .HasColumnName("diagnosis");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Medications")
                        .HasColumnType("text")
                        .HasColumnName("medications");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasColumnName("symptoms");

                    b.Property<string>("Treatment")
                        .HasColumnType("text")
                        .HasColumnName("treatment");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("visit_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_record", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("target_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.ObstetricHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Complications")
                        .HasColumnType("text")
                        .HasColumnName("complications");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("text")
                        .HasColumnName("delivery_type");

                    b.Property<int>("EctopicPregnancies")
                        .HasColumnType("integer")
                        .HasColumnName("ectopic_pregnancies");

                    b.Property<DateTime?>("LastDeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_delivery_date");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("Stillbirths")
                        .HasColumnType("integer")
                        .HasColumnName("stillbirths");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("obstetric_history", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_phone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text")
                        .HasColumnName("marital_status");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpectedDueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expected_due_date");

                    b.Property<bool>("IsHighRisk")
                        .HasColumnType("boolean")
                        .HasColumnName("is_high_risk");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("pregnancy", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Dosage")
                        .HasColumnType("text")
                        .HasColumnName("dosage");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medication_name");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("prescription_date");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("prescription", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ClinicSystem.API.Models.AntenatalVisit", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Pregnancy", "Pregnancy")
                        .WithMany("AntenatalVisits")
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregnancy");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Appointment", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicSystem.API.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.FileUpload", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("FileUploads")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.GynecologicalHistory", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Invoice", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Appointment", "Appointment")
                        .WithMany("Invoices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.LabTest", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("LabTests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Doctor", "RequestedByDoctor")
                        .WithMany()
                        .HasForeignKey("RequestedByDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("RequestedByDoctor");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.MedicalRecord", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Doctor", "Doctor")
                        .WithMany("DoctorMedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("PatientMedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Notification", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.ObstetricHistory", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Patient", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Pregnancy", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Prescription", b =>
                {
                    b.HasOne("ClinicSystem.API.Models.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicSystem.API.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Appointment", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorMedicalRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FileUploads");

                    b.Navigation("Invoices");

                    b.Navigation("LabTests");

                    b.Navigation("PatientMedicalRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("ClinicSystem.API.Models.Pregnancy", b =>
                {
                    b.Navigation("AntenatalVisits");
                });
#pragma warning restore 612, 618
        }
    }
}
